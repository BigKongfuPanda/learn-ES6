/**
 * 目录：
 * 1. 数组的解构赋值
 * 2. 对象的解构赋值
 * 3. 字符串的解构赋值
 * 4. 数值和布尔值的解构赋值
 * 5. 函数参数的解构赋值
 * 6. 圆括号问题
 * 7. 用途
 */

 // 1. 数组的解构赋值

let a = 1;
let b = 2;
let c = 3;
 // 等价于
 let [a, b, c] = [1, 2, 3];

 // 一些例子
let [foo, [[bar], baz]] = [1, [[2], 3]];
foo // 1
bar // 2
baz // 3

let [ , , third] = ["foo", "bar", "baz"];
third // "baz"

let [x, , y] = [1, 2, 3];
x // 1
y // 3

let [head, ...tail] = [1, 2, 3, 4];
head // 1
tail // [2, 3, 4]

let [x, y, ...z] = ['a'];
x // "a"
y // undefined
z // []

// 另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。
let [x, y] = [1, 2, 3];
x // 1
y // 2

let [a, [b], d] = [1, [2, 3], 4];
a // 1
b // 2
d // 4

//对于 Set 结构，也可以使用数组的解构赋值。
let [x, y, z] = new Set(['a', 'b', 'c']);
x // a 
y // b
z // c

// 解构赋值允许指定默认值。
let [foo = true] = [];
foo // true

let [x, y = 'b'] = ['a']; // x='a', y='b'
let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'


// 2. 对象的解构赋值
